import random

# Define the fitness function
def fitness_function(x):
    return x ** 2 - 3 * x + 4

# Genetic Algorithm implementation
def genetic_algorithm():
    population_size = 50
    chromosome_length = 8
    generations = 100

    # Generate initial population
    population = []
    for _ in range(population_size):
        chromosome = ''.join(random.choice('01') for _ in range(chromosome_length))
        population.append(chromosome)

    for _ in range(generations):
        # Evaluate fitness for each individual
        fitness_scores = [fitness_function(int(chromosome, 2)) for chromosome in population]

        # Select parents based on fitness scores
        parents = random.choices(population, weights=fitness_scores, k=2)

        # Apply crossover and mutation to create offspring
        offspring = crossover(parents[0], parents[1])
        offspring = mutation(offspring)

        # Replace least fit individuals in the population
        population = replace_least_fit(population, fitness_scores, offspring)

    # Return the best individual
    best_individual = max(population, key=lambda chromosome: fitness_function(int(chromosome, 2)))
    return best_individual

# Crossover operation
def crossover(parent1, parent2):
    crossover_point = random.randint(1, len(parent1) - 1)
    offspring = parent1[:crossover_point] + parent2[crossover_point:]
    return offspring

# Mutation operation
def mutation(chromosome):
    mutation_point = random.randint(0, len(chromosome) - 1)
    mutated_chromosome = list(chromosome)
    mutated_chromosome[mutation_point] = '1' if mutated_chromosome[mutation_point] == '0' else '0'
    return ''.join(mutated_chromosome)

# Replace least fit individuals in the population with offspring
def replace_least_fit(population, fitness_scores, offspring):
    min_fitness_index = fitness_scores.index(min(fitness_scores))
    population[min_fitness_index] = offspring
    return population

# Main driver code
if __name__ == '__main__':
    best_solution = genetic_algorithm()
    best_value = fitness_function(int(best_solution, 2))
    print("Best solution:", best_solution)
    print("Best value:", best_value)